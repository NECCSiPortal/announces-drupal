<?php
define("KEYSTONE_URL", "http://192.168.1.1:35357");
define("KEYSTONE_USER_NAME", "user_name");
define("KEYSTONE_USER_PASSWORD", "xxxx");
define("KEYSTONE_ADMIN_PROJECT", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

define("AFLO_URL", "http://192.168.1.1:9294");

/**
 * Implements hook_user_login().
 *
 * Edit Role and Grant Role  Keystone API,Edit Role Based on Keystone API.
 */
function drpmdl_neccs_login_user_login(&$edit, $account) {
    watchdog(
        'drpmdl_neccs_login',
        'Hook user login. [%keystone_url, %keystone_user_name, %keystone_project]',
        array('%keystone_url'=>KEYSTONE_URL,
              '%keystone_user_name'=>KEYSTONE_USER_NAME,
              '%keystone_project'=>KEYSTONE_ADMIN_PROJECT),
        WATCHDOG_NOTICE,
        NULL
    );
    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'drpmdl_neccs_login') . "/common.php";
    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'drpmdl_neccs_login') . "/role.php";
    try {
        // get token
        $data = '{"auth":{"identity": {"methods":["password"], "password": {"user":{"name": "' . KEYSTONE_USER_NAME . '","password": "' . KEYSTONE_USER_PASSWORD . '","domain": {"id": "default"}}}}, "scope":{"project": {"id": "' . KEYSTONE_ADMIN_PROJECT . '"}}}}';

        $token_result = http_post_request(KEYSTONE_URL . "/v3/auth/tokens", array('Content-Type: application/json'), $data);
        $token = $token_result["header"]["X-Subject-Token"];
        // get users
        $users_result = http_get_request(KEYSTONE_URL . "/v3/users", array('X-Auth-Token:'. $token));
        $users_result_body = json_decode($users_result["body"]);
        $user_id = get_user_id($users_result_body, $account->name);
        if (empty($user_id)) {
              throw new ErrorException("An error is occured on establishing connection. \n Please contact to system manager.");
        }
        // get user project
        $project_result = http_get_request(KEYSTONE_URL . "/v3/users/" . $user_id . "/projects", array('X-Auth-Token:'. $token));
        $project_result_body = json_decode($project_result["body"]);
        user_role_permission($project_result_body, $account);
        user_taxonomy_register($project_result_body);
    } catch (Exception $e) {
        //drupal_goto('/user/logout', array('query' => array('destination' => 'loginError')));
        watchdog(
            'drpmdl_neccs_login',
            'Login Hook Error(%file %line): %message %stacktrace',
            array('%file'=>$e->getFile(),
                  '%line'=>$e->getLine(),
                  '%message'=>$e->getMessage(),
                  '%stacktrace'=>$e->getTraceAsString()),
            WATCHDOG_ERROR,
            NULL
        );
    }
}


function drpmdl_neccs_login_node_insert($node) {

    if ( property_exists($node, 'field_tenantid') &&
         0 < count($node->field_tenantid["und"])
    ) {

        $taxonomy_term = taxonomy_term_load($node->field_tenantid["und"][0]["tid"]);

        $name = $taxonomy_term->name;
        $result = db_select('role', 'r')
        ->fields('r')
        ->condition('name', $name, '=')
        ->execute()
        ->fetchCol();

    }

}

/**
 * Get User Id from Keystone User by Login User Name.
 */
function get_user_id($users, $user_name) {
    $user_id = "";
    foreach ($users->users as $user) {
        if ($user->name === $user_name) {
            $user_id = $user->id;
            break;
        }
    }
    return $user_id;
}

/**
 * Edit Role and Grant Role Based on Affiliation Project Name.
 */
function user_role_permission($project_result, $user) {
    // Prepare temporary data, so we can check them.
    $target_role_names = $user->roles;

    // Prepare reference data.
    $reffer_role_names = [];
    foreach($project_result->projects as $project) {
        if (!array_key_exists('id', $project)) {
            // Never reach here, I think.
            watchdog(
                'drpmdl_neccs_login',
                'Keyston returns a id-less project on %user_id',
                array('%user_id'=>$user->name),
                WATCHDOG_WARNING,
                NULL
            );
            continue;
        }
        array_push($reffer_role_names, $project->id);
    }

    //
    // Adding new role to user (Drupal does not know the user has that role)
    foreach($reffer_role_names as $reffer_role_name){
        // Check the user in Drupal already has the role.
        if (in_array($reffer_role_name, $target_role_names)) {
            continue;
        }
        // Let create a new role and grant to the user.
        $new_role = add_role_permission($reffer_role_name);
        grant_role($user, $new_role);
        watchdog(
            'drpmdl_neccs_login',
            'Added %role_name to %user_id',
            array('%role_name'=>$reffer_role_name, '%user_id'=>$user->name),
            WATCHDOG_INFO,
            NULL
        );
        // Store it to temporary data.
        array_push($target_role_names, $reffer_role_name);
    }

    //
    // Removing old role from user
    foreach($target_role_names as $target_role_name){
        if ($target_role_name === 'authenticated user' or $target_role_name === 'administrator') {
            continue;
        }
        if (in_array($target_role_name, $reffer_role_names)) {
            continue;
        }
        // Let remove the old role and grant to the user.
        $old_role = user_role_load_by_name($target_role_name);
        user_multiple_role_edit(array($user->uid), 'remove_role', $old_role->rid);
        watchdog(
            'drpmdl_neccs_login',
            'Removed %role_name from %user_id',
            array('%role_name' => $target_role_name, '%user_id' => $user->name),
            WATCHDOG_INFO,
            NULL
        );
    }

}

/**
 * Get Taxonomy not registered.
 */
function user_taxonomy_register($project_result) {
     $vocabulary = taxonomy_vocabulary_machine_name_load("tenantid");
     $taxonomy = taxonomy_get_tree($vocabulary->vid);

     foreach($project_result->projects as $project){
           $empty = True;
           foreach($taxonomy as $taxonomy_term){
                 if($project->id == $taxonomy_term->name){
                       $empty = False;
                       break;
                 }
           }
           if($empty){
                 add_taxonomy($project->id, $vocabulary->vid);
           }
     }
}

function add_taxonomy($project_id, $vid){
     $taxonomy = new stdClass();
     $taxonomy->vid = $vid;
     $taxonomy->name = $project_id;
     taxonomy_term_save($taxonomy);
}

function drpmdl_neccs_login_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
  if (array_key_exists("admin", $form)) {
    foreach ($form['admin']['nodes']['#options'] as $nid => $row) {
      $array = array('title'=> 'translate', 'href'=> 'node/'. $nid . '/translate');
      $form['admin']['nodes']['#options'][$nid]['operations']['data']['#links']['translate'] = $array;
      if($form['admin']['nodes']['#options'][$nid]['type'] == "Webform"){
         $array_web = array('title'=> 'webform', 'href'=> 'node/'. $nid . '/webform');
         $form['admin']['nodes']['#options'][$nid]['operations']['data']['#links']['webform'] = $array_web;
      }
    }
  }
}
